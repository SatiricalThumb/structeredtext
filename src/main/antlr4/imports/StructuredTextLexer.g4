lexer grammar StructuredTextLexer;

fragment FIXED_POINT: DIGIT+ (DOT DIGIT+)?;

DAY_LITERAL : FIXED_POINT 'd';
HOURS_LITERAL : FIXED_POINT 'h';
MINUTES_LITERAL : FIXED_POINT 'm';
SECONDS_LITERAL : FIXED_POINT 's';
MILLIESECONDS_LITERAL : FIXED_POINT 'ms';


fragment LETTER : ('a'..'z' | 'A'..'Z');
fragment DIGIT : '0'..'9';
fragment HEX_DIGIT : DIGIT | 'A'..'F';
fragment OCTAL_DIGIT : '0'..'7';


CHARACTER_LITERAL_2BYTE : '$' HEX_DIGIT HEX_DIGIT;
CHARACTER_LITERAL_4BYTE : '$' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;

INTEGER_LITERAL: DIGIT (DIGIT |'_')*;
OCTAL_LITERAL:   '8#' OCTAL_DIGIT (OCTAL_DIGIT |'_')*;
BINARY_LITERAL:  '2#' BIT (BIT | '_')*;
HEX_LITERAL:    '16#' HEX_DIGIT ('_' | HEX_DIGIT)*;
REAL_LITERAL: [+-]? FIXED_POINT ([eE] DIGIT+)?;


REALH:'REALH';
LREALH:'REALH';
RETURN:'RETURN';
COMMA:',';
ARROW_RIGHT : '=>';
NOT:'NOT';
END_CASE:'END_CASE';
OF:'OF';
CASE: 'CASE';
IF: 'IF';
ELSIF:'ELSIF';
ELSE:'ELSE';
THEN:'THEN';

//Cast Operators
BYTEH:'BYTE#';
BOOLH:'BOOL#';
WORDH:'WORD#';
DWORDH:'DWORD#';
LWORDH:'LWORD#';

WORD:'WORD';
DWORD:'DWORD';
LWORD:'LWORD';
HASH:'#';

TRUE  : 'TRUE';
FALSE : 'FALSE';
SQUOTE:'\'';
DQUOTE:'"';
DOLLAR:'$';
T:'T';
TIME:'TIME';
STRING  : 'STRING';
WSTRING : 'WSTRING';
INT:'INT';
SINT:'SINT';
DINT:'DINT';
LINT:'LINT';
UINT:'UINT';
USINT:'USINT';
UDINT:'UDINT';
ULINT:'ULINT';
REAL:'REAL';
BOOL:'BOOL';
ANY:'ANY';
ANY_DERIVED:'ANY_DERIVED';
ANY_MAGNITUDE:'ANY_MAGNITUDE';
ANY_ELEMENTARY:'ANY_ELEMENTARY';
ANY_NUM:'ANY_NUM';
ANY_REAL:'ANY_REAL';
ANY_INT:'ANY_INT';
ANY_BIT:'ANY_BIT';
ANY_STRING:'ANY_STRING';
ANY_DATE:'ANY_DATE';
ARRAY:'ARRAY';

//EXPONENT: [eE];
MULT:'*';
DIV:'/';
MOD:'MOD';
LPAREN: '(';
RPAREN: ')';

LBRACKET:'[';
RBRACKET:']';

SEMICOLON:';';
POWER:'**';
ASSIGN:':=';
FOR:'FOR';
END_FOR:'END_FOR';
TO:'TO';
BY:'BY';
DO:'DO';
WHILE:'WHILE';
END_WHILE:'END_WHILE';
UNTIL: 'UNTIL';
END_REPEAT: 'END_REPEAT';
REPEAT: 'REPEAT';
EXIT: 'EXIT';


NIL : 'NIL';
RETAIN : 'RETAIN';
NON_RETAIN : 'NON_RETAIN';

BIT : '1' | '0';


WS: [ \r\t\n] -> skip;

BYTE: 'BYTE';
MINUS: '-';
PLUS : '+';

LESS_THAN:'<';
GREATER_THAN:'>';
GREATER_EQUALS:'>=';
LESS_EQUALS: '<=';
EQUALS: '=';
NOT_EQUALS:'<>';

AMPERSAND:'&';
VAR_OUTPUT:'VAR_OUTPUT';
VAR_EXTERNAL:'VAR_EXTERNAL';
FUNCTION_BLOCK:'FUNCTION_BLOCK';
END_PROGRAM:'END_PROGRAM';
RIGHT_ARROW:'RIGHT_ARROW';
END_STRUCT:'END_STRUCT';
END_IF:'END_IF';
VAR_TEMP:'VAR_TEMP';
COLON:':';

DT:'DT';
LREAL:'LREAL';
PERCENT:'%';
PROGRAM: 'PROGRAM';
OR:'OR';
AND:'AND';
XOR:'XOR';
END_CONFIGURATION:'END_CONFIGURATION';

DATE:'DATE';
STRUCT: 'STRUCT';
DOT: '.';
WITH:'WITH';
SINGLE: 'SINGLE';
END_TYPE:'END_TYPE';
VAR_INPUT: 'VAR_INPUT';
VAR_GLOBAL:'VAR_GLOBAL';
TASK:'TASK';
TYPE:'TYPE';
FUNCTION:'FUNCTION';
DOLLAR_DQUOTE: '$"';
VAR_IN_OUT:'VAR_IN_OUT';
END_FUNCTION:'END_FUNCTION';
END_FUNCTION_BLOCK:'END_FUNCTION_BLOCK';
INTERVAL:'INTERVAL';
CONSTANT:'CONSTANT';
VAR:'VAR';
VAR_CONFIG:'VAR_CONFIG';
END_VAR:'END_VAR';
PRIORITY:'PRIORITY';
READ_WRITE:'READ_WRITE';
READ_ONLY:'READ_ONLY';
VAR_ACCESS:'VAR_ACCESS';
RANGE: '..';
END_RESOURCE:'END_RESOURCE';
CONFIGURATION:'CONFIGURATION';
RESOURCE:'RESOURCE';
ON:'ON';
R_EDGE:'R_EDGE';
F_EDGE:'F_EDGE';
AT:'AT';
I:'I';
Q:'Q';
M:'M';
X:'X';
B:'B';
W:'W';
D:'D';
L:'L';
DOLLAR_SQUOTE:'$\'';
DOLLAR_DOLLAR: '$$';
DOLLAR_L: '$L';
DOLLAR_N: '$N';
DOLLAR_P: '$P';
DOLLAR_R: '$R';
DOLLAR_T: '$T';
DOLLAR_l: '$l';
DOLLAR_n: '$n';
DOLLAR_p: '$p';
DOLLAR_r: '$r';
DOLLAR_t: '$t';
UNDERSCORE:'_';
TIME_OF_DAY:'TIME_OF_DAY#';
TOD:'TOD#';
DATE_AND_TIME:'DATE_AND_TIME';


IDENTIFIER: [a-zA-Z] [a-zA-Z0-9_]*;